// Errors generated by Gorror; DO NOT EDIT.

package zotero

import (
	"errors"
	"fmt"
	"net/http"
)

type _errWrap struct{ cause error }

func (w *_errWrap) Unwrap() error { return w.cause }

func (e errSpec) IsIn(err error) bool {
	var ei interface {
		Is(errSpec) bool
		Unwrap() error
	}
	if errors.As(err, &ei) {
		if ei.Is(e) {
			return true
		}
		return e.IsIn(ei.Unwrap())
	}
	return false
}

type ErrWrongURL struct {
	_errWrap
	url string
}

func NewErrWrongURL(url string, err error) *ErrWrongURL {
	return &ErrWrongURL{_errWrap{err}, url}
}

func (e *ErrWrongURL) Error() string {
	return fmt.Sprintf("creating request to %s: %v", e.url, e.cause)
}

func (e *ErrWrongURL) Wrap(cause error) error {
	e.cause = cause
	return e
}

func (*ErrWrongURL) Is(e errSpec) bool { return e == errWrongURL }

type ErrMakeReq struct {
	_errWrap
	req http.Request
}

func NewErrMakeReq(req http.Request, err error) *ErrMakeReq {
	return &ErrMakeReq{_errWrap{err}, req}
}

func (e *ErrMakeReq) Error() string {
	return fmt.Sprintf("executing request to %s: %v", e.req.URL, e.cause)
}

func (e *ErrMakeReq) Wrap(cause error) error {
	e.cause = cause
	return e
}

func (*ErrMakeReq) Is(e errSpec) bool { return e == errMakeReq }

type ErrReadBody struct {
	_errWrap
}

func NewErrReadBody(err error) *ErrReadBody {
	return &ErrReadBody{_errWrap{err}}
}

func (e *ErrReadBody) Error() string {
	return fmt.Sprintf("reading response body: %v", e.cause)
}

func (e *ErrReadBody) Wrap(cause error) error {
	e.cause = cause
	return e
}

func (*ErrReadBody) Is(e errSpec) bool { return e == errReadBody }

type ErrJSON struct {
	_errWrap
}

func NewErrJSON(err error) *ErrJSON {
	return &ErrJSON{_errWrap{err}}
}

func (e *ErrJSON) Error() string {
	return fmt.Sprintf("parsing JSON from reply: %v", e.cause)
}

func (e *ErrJSON) Wrap(cause error) error {
	e.cause = cause
	return e
}

func (*ErrJSON) Is(e errSpec) bool { return e == errJSON }

type ErrWrongStatus struct {
	recv int
	exp  int
}

func NewErrWrongStatus(recv int, exp int) *ErrWrongStatus {
	return &ErrWrongStatus{recv, exp}
}

func (e *ErrWrongStatus) Error() string {
	return fmt.Sprintf("received %v status code instead of %v", e.recv, e.exp)
}

func (*ErrWrongStatus) Is(e errSpec) bool { return e == errWrongStatus }

type ErrParseHeader struct {
	_errWrap
	header string
}

func NewErrParseHeader(header string, err error) *ErrParseHeader {
	return &ErrParseHeader{_errWrap{err}, header}
}

func (e *ErrParseHeader) Error() string {
	return fmt.Sprintf("parsing header %q: %v", e.header, e.cause)
}

func (e *ErrParseHeader) Wrap(cause error) error {
	e.cause = cause
	return e
}

func (*ErrParseHeader) Is(e errSpec) bool { return e == errParseHeader }
